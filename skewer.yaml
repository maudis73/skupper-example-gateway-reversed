title: Skupper Hello World using the gateway
subtitle: Connect services running as system processes
github_actions_url: https://github.com/ssorj/skupper-example-gateway-reversed/actions/workflows/main.yaml
overview: |
  This example is a basic multi-service HTTP application deployed
  across a Kubernetes cluster and a bare-metal host or VM.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<hostname>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  The backend runs on Kubernetes and the frontend runs on your local
  machine.  Skupper enables the frontend to connect to the backend
  using a dedicated service network.

  <!-- <img src="images/entities.svg" width="640"/> -->
prerequisites: |
  * A working installation of Docker ([installation
    guide][install-docker]) or Podman ([installation
    guide][install-podman])

  * The `kubectl` command-line tool, version 1.15 or later
    ([installation guide][install-kubectl])

  * Access to a Kubernetes cluster, from [any provider you
    choose][kube-providers]

  * The `starlette` and `uvicorn` Python modules.  This is required to
    run the backend service locally.  To install the modules, run `pip
    install starlette uvicorn`.

  [install-docker]: https://docs.docker.com/engine/install/
  [install-podman]: https://podman.io/getting-started/installation
  [install-kubectl]: https://kubernetes.io/docs/tasks/tools/install-kubectl/
  [kube-providers]: https://skupper.io/start/kubernetes.html
sites:
  hello-world:
    kubeconfig: ~/.kube/config-hello-world
    namespace: hello-world
steps:
  - standard: install_the_skupper_command_line_tool
  - title: Access your Kubernetes cluster
    preamble: |
      The procedure for accessing a Kubernetes cluster varies by
      provider. [Find the instructions for your chosen
      provider][kube-providers] and use them to authenticate and
      configure access.
  - title: Set up your Kubernetes namespace
    preamble: |
      Use `kubectl create namespace` to create the namespace you wish
      to use (or use an existing namespace).  Use `kubectl config
      set-context` to set the current namespace for your session.
    commands:
      hello-world:
        - run: kubectl create namespace hello-world
          output: namespace/hello-world created
        - run: kubectl config set-context --current --namespace hello-world
          output: Context "minikube" modified.
  - title: Install Skupper in your Kubernetes namespace
    preamble: |
      The `skupper init` command installs the Skupper router and service
      controller in the current namespace.

      **Note:** If you are using Minikube, [you need to start `minikube
      tunnel`][minikube-tunnel] before you install Skupper.

      [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel
    commands:
      hello-world:
        - run: skupper init
          output: |
            Waiting for LoadBalancer IP or hostname...
            Skupper is now installed in namespace 'hello-world'.  Use 'skupper status' to get more information.
  - title: Install the Skupper gateway
    preamble: |
      The `skupper gateway init` command starts a Skupper router on
      your local system and links it to the Skupper router in the
      current Kubernetes namespace.
    commands:
      hello-world:
        - run: skupper gateway init --type docker
          output: |
            Skupper gateway: 'fancypants-jross'. Use 'skupper gateway status' to get more information.
        - run: sleep 2 # XXX
          apply: test
    postamble: |
      The `--type docker` option runs the router as a Docker
      container.  You can also run it as a Podman container (`--type
      podman`) or as a systemd service (`--type service`).
  - title: Deploy the frontend and backend services
    preamble: |
      For this example, we are running the backend on Kubernetes and
      the frontend as a local system process.

      Use `kubectl create deployment` to deploy the backend service
      in `hello-world`.

      Change to the `frontend` directory and use `python
      python/main.py` to start the backend process.  You can run this in a
      different terminal if you prefer.
    commands:
      hello-world:
        - run: kubectl create deployment backend --image quay.io/skupper/hello-world-backend
          output: deployment.apps/backend created
        - run: (cd frontend && python python/main.py --host localhost --port 8080 --backend "http://localhost:8081") &
  - title: Expose the backend service
    preamble: |
      Use `skupper service create` to define a Skupper service called
      `backend`.  Use `skupper servce bind` to associate it with your
      backend deployment.  Use `skupper gateway forward` to link local
      requests to port 8081 to the new service.
    commands:
      hello-world:
        - run: skupper service create backend 8080
        - await: deployment/backend
        - run: skupper service bind backend deployment/backend
        - await: service/backend
        - run: skupper gateway forward backend 8081
  - title: Test the application
    preamble: |
      Now we're ready to try it out.  Use `curl` or a similar tool to
      request the `http://localhost:8080/api/health` endpoint.
    commands:
      hello-world:
        - run: curl http://localhost:8080/api/health
          apply: readme
          output: OK
        - run: curl --fail --verbose --retry 60 --retry-connrefused --retry-delay 2 http://localhost:8080/api/health
          apply: test
    postamble: |
      If everything is in order, you can now access the web interface
      by navigating to `http://localhost:8080/` in your browser.
  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      hello-world:
        - run: kill $(ps -ef | grep 'python python/main\.py' | awk '{print $2}') 2> /dev/null
        - run: skupper gateway delete
        - run: skupper delete
        - run: kubectl delete service/frontend
        - run: kubectl delete deployment/frontend
